<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <title>UPS System</title>
    <style>
        /* Make the chart container horizontally scrollable */
        .chart-container {
          width: 100%;
          overflow-x: auto;
          padding-bottom: 10px; /* Ensure there's space for scroll */
          position: relative;
        }
      
        canvas {
          width: 2000px; /* Set a large width for the chart */
          height: 400px; /* Adjust height as needed */
        }
      </style>
</head>

<body>
    <nav class="navbar navbar-expand-lg" style="background-color:#490e0e;">
       <div class="container">
        <a class="navbar-brand text-white" href="#">MTP COMPANY</a>
       </div>
    </nav>

    <header class="py-5 bg-light">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-md-10 mx-auto">
                    <h1> MTP monitoring Gate barrier Open count</h1>
                    <p class="lead">
                        In MTP monitoring Gate barrier Open count, we developed an innovative solution for monitoring Gate barrier Open count remotely, 
                        which provides information on battery voltage, and the number of times  Gate barrier open using a website. 
                        As a result of these data, we are able to monitor and collect data for power consumption and plan our design accordingly in order to rectify them with backup power source.
                        
                    </p>
                </div>
            </div>
        </div>
    </header>
    <!-- <div class="row ">
       <div class="col-lg-3 col-md-3 col-sm3 mx-auto">
       <img src="/images/ups.jpg" alt="Device Image" class="img-fluid container "> 
       <p class="text-center"></p>
    </div>  -->
    <div class="py-5 bg-light">
        <div class="container">
            <h2>UPS Status</h2>
            <div class="table-responsive">
                <table class="table table-striped table-sm">
                     <thead>
                        <tr>
                           
                           <th>Status</th> 
                           <th>Last Online</th> 
                           <th>Battery</th> 
                           <th>gateOpenCount</th> 
                        </tr>
                    </thead>
                    <tbody id="result">
                        <tr>
                           
                            <th><span id="status"></span></th> 
                            <th><span id="lastonline"></span></th> 
                            <th><span id="battery"></span></th> 
                            <th><span id="gateOpenCount"></span></th> 
                         </tr>
                         <!-- <tr>
                            <th><span class="id"></span></th> 
                            <th><span class="status"></span></th> 
                            <th><span class="lastonline"></span></th> 
                            <th><span class="battery"></span></th> 
                            <th><span class="load"></span></th> 
                         </tr> -->
                    </tbody>

                </table>

                <div class="chart-container">
                    <canvas id="batteryChart"></canvas>
                </div>
                
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
 <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
    
    <script>
      const socket = io();
  
      socket.on('updateData', (data) => {
       //for(let i=0;i<=1;i++)
       {
        document.getElementById('gateOpenCount').innerHTML = (data[0].gateOpenCount);
       
       
        document.getElementById('status').innerHTML = data[0].status== "Online" ? "Online" : "Offline";
        document.getElementById('status').style.color = data[0].status == "Online" ? "green" : "red";
        document.getElementById('lastonline').innerHTML = data[0].lastonline;
        if(isNaN((data[0].battery)))
            {
                data[0].battery="0";
            }
            var v = parseFloat(data[0].battery);
            console.log(v);
            document.getElementById('battery').innerHTML = v !== null ? v + ' V' : 'invalid ';
           document.getElementById('battery').style.color = data[0].battery <= 10.5 ? "red" : "green";  

       }
       fetchData();

            
      });


      ////chart
      async function fetchData() {
    const response = await fetch('/history');
    const data = await response.json();

    // Convert timestamps to Date objects and sort by date
    data.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

    const timestamps = data.map(entry => 
        new Date(entry.timestamp).toLocaleString('en-GB', { 
            hour: '2-digit', minute: '2-digit' // Only show hour and minute
        })
    );
    const batteryLevels = data.map(entry => parseFloat(entry.battery));

    const ctx = document.getElementById('batteryChart').getContext('2d');
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: timestamps,
            datasets: [{
                label: 'Battery Voltage',
                data: batteryLevels,
                borderColor: 'blue',
                backgroundColor: 'rgba(0, 0, 255, 0.2)',
                fill: true
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: false // Hides the legend
                }
               
            },
            scales: {
                x: { 
                    title: { display: true, text: 'Time' },
                    ticks: { 
                        autoSkip: true, maxTicksLimit: 50 // Ensure all labels fit horizontally
                    },
                    offset: true, // Make sure the labels donâ€™t overlap with the chart
                    grid: {
                        display: false // Hide gridlines on the x-axis
                    }
                },
                y: { 
                    title: { display: true, text: 'Battery Voltage' },
                    suggestedMin: 8, // Minimum Y-axis value
                    suggestedMax: 14, // Maximum Y-axis value
                    ticks: {
                        stepSize: 2 // Controls the space between each tick
                    }
                }
            },
            layout: {
                padding: {
                    left: 10,
                    right: 10,
                    top: 10,
                    bottom: 10
                }
            }
        }
    });
}

fetchData();

      
    </script>
  

</body>

</html>